const currentURL=window.location.href;

/* Initialize Thread Pool ///TODO move this somewhere more suitable mby */
if(currentURL.indexOf("index")!==-1){
    fetch('http://localhost:4200/home/index',{
        method:'GET',
        headers:{
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    }).then(response=>response.text()).then(data=>console.log(data));
}

window.onload = async function () {
    /* Request all files of the user for the current scope (scope===folder) */
    let getFilesResponse=await fetch('http://localhost:4200/home/index/all',{
        method:"GET",
        headers:{
            'x-user':1,
            'x-scope':'root'
        }
    });
    let fileArray=await getFilesResponse.json();
    clearFileCards();
    fileArray.forEach(file=>{
        generateFileCard(file);
    });

    /* Upload file section */
    var fileupload = document.getElementById("FileUpload");
    var filePath = document.getElementById("spanFilePath");
    var image = document.getElementById("imgFileUpload");
    image.onclick = function () {
        fileupload.click();
    };
    fileupload.onchange = async function () {
        var fileName = fileupload.value.split('\\')[fileupload.value.split('\\').length - 1];
        filePath.innerHTML = "<b>Selected File: </b>" + fileName;
        /* The file upload will return the new fileArray */
        let response=await fetch('http://localhost:4200/home/index/upload',{
            method:"POST",
            headers:{
                'x-filename':fileName,
                'x-user':1,
                'x-scope':'root'
            },
            body:fileupload.files[0]
        });
        if(response.status===200){
            let fileArray=await response.json();
            clearFileCards();
            fileArray.forEach(file=>{
                generateFileCard(file);
            });
        }else{
            alert('The file could not be uploaded. Probably duplicate?');
        }  
        this.value=null;  /* Without this you won't be able to add the same file consecutive times. Because the onchange treats the upload of the same file as the previous one as the same event */
    };
};

/* Remove previously generated FileCards. Could we maybe only update the previous array? Yes No Maybe?*/
function clearFileCards(){
    var divsToRemove = document.getElementsByClassName("contentContainerAutoGenerated");
    for (var i = divsToRemove.length-1; i >= 0; i--) {
        divsToRemove[i].remove();
    }
}

/* Generate the fileCard based on the JSON element returned by the server. For structure reference see the first versions of the fileCard made in the FE  */
function generateFileCard(file){
    let directory="/assets/img/home";
    let div=document.getElementById("mainContent");
    let divContentContainer=createDivContentContainer({file:file,directory:directory});
    div.appendChild(divContentContainer);
}

function createContentTitleDiv(filename){
    let contentTitle=document.createElement("div");
    contentTitle.classList.add("contentTitle");
    contentTitle.innerHTML=filename;
    return contentTitle;
}

function createUnorderedList(object){
    let ul=document.createElement("ul");

        let size=document.createElement("li");
        size.innerHTML=`Size: ${Math.floor(object.file.size/1024)}Kb`;

        let extension=document.createElement("li");
        extension.innerHTML=`Extension: ${object.file.filename.split('.').pop()}`;

        let sharedChunks=createSharedChunks(object.directory);

        let downloadButton=document.createElement("button");
        downloadButton.classList.add("backCardDownloadButton");
        downloadButton.innerHTML="Download";

    ul.appendChild(size);
    ul.appendChild(extension);
    ul.appendChild(sharedChunks);
    ul.appendChild(downloadButton);
    return ul;
}

function createSharedChunks(directory){
    let sharedChunks=document.createElement("li");
    let googleDrive=document.createElement("img");
    googleDrive.classList.add("backCardImage");
    googleDrive.src=`${directory}/drive.svg`;
    let oneDrive=document.createElement("img");
    oneDrive.classList.add("backCardImage");
    oneDrive.src=`${directory}/oneDrive.svg`;
    let dropbox=document.createElement("img");
    dropbox.classList.add("backCardImage");
    dropbox.src=`${directory}/dropbox.svg`;
    sharedChunks.appendChild(googleDrive);
    sharedChunks.appendChild(oneDrive);
    sharedChunks.appendChild(dropbox);
    return sharedChunks;
}

function createDivFrontCard(object){
    let divFrontCard=document.createElement("div");
    divFrontCard.classList.add("frontRotate");
    divFrontCard.classList.add("rotatedCard");
    let imgContentImage=document.createElement("img");
    imgContentImage.classList.add("contentImage");
    imgContentImage.src=`${object.directory}/fileTypes/${object.file.filename.split('.').pop()}.svg`;
    divFrontCard.appendChild(imgContentImage);
    return divFrontCard;
}

function createDivBackCard(object){
    let divBackCard=document.createElement("div");
    divBackCard.classList.add("backRotate");
    divBackCard.classList.add("rotatedCard");
    let ul=createUnorderedList({file:object.file,directory:object.directory});  ///function
    divBackCard.appendChild(ul);
    return divBackCard;
}

function createContentImageContainer(object){
    let divContentImageContainer=document.createElement("div");
    divContentImageContainer.classList.add("contentImageContainer");
    divContentImageContainer.classList.add("fileCard");
    let divFrontCard=createDivFrontCard(object);
    let divBackCard=createDivBackCard(object);
    divContentImageContainer.appendChild(divFrontCard);
    divContentImageContainer.appendChild(divBackCard);
    return divContentImageContainer;
}

function createDivContentContainer(object){
    let divContentContainer=document.createElement("div");
    divContentContainer.classList.add("contentContainerAutoGenerated");
    let divContentImageContainer=createContentImageContainer({file:object.file,directory:object.directory});
    divContentContainer.appendChild(divContentImageContainer);
    let contentTitle=createContentTitleDiv(object.file.filename); ///function
    divContentContainer.appendChild(contentTitle);
    return divContentContainer;
}